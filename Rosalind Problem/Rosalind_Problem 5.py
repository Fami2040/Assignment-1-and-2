def compute_gc(dna_string):
    """
    Computes the GC content of each DNA sequence in the input fasta string.
    
    :param dna_string: A string in FASTA format with sequences.
    :return: A dictionary with sequence IDs as keys and a tuple of GC content and sequence as values.
    """
    dna_dict = {}
    current_key = ""
    current_sequence = ""
    gc_count = 0
    
    for line in dna_string.strip().split('>'):
        if line:
            # First line in fasta data, split ID and DNA
            parts = line.split("\n", 1)
            current_key = parts[0].strip()
            current_sequence = parts[1].replace("\n", "").strip()  # Remove line-breaks
            
            gc_count = current_sequence.count('C') + current_sequence.count('G')
            gc_content = (gc_count / len(current_sequence)) * 100  # compute
            
            dna_dict[current_key] = (gc_content, current_sequence)
    return dna_dict


# Main block of FASTA input string
fasta_data = """>Rosalind_0895
CTCTGTGAAAATTCTTTATGGGCTCGTCGCCTATATCACACAGGCAGCCGACCCCGGGAG
CACCGATCCAACGGTAGTACTTTGAGCAGCATCCCAGTCCCGCTCTGACAGGTTCCCCTG
ACATATGGAGTGTGCCCTACCTTAACCTTGCTCAGAGTCTGAAAAGGTCAAACTTAGAAC
CTGACCTAGAGAACGCCTACGGCGGTTAGAGATGTAGAAGAATTGCGTTATCCCCACCCA
TTACCCTCCGCGTGTTGCAGTTTCGTAGTCCTTCGTCTACTGAAAGATGTGCAGTGTGCC
ACCCCCTCCACCACATTACACGGTCGTTCAGCACGCGGAGGGTTCCCCCGCCCGCACGTA
TGTCGGCCTAGAACATGGTAATCATGCCCATTATACCGCAGCTATCTGCCGCTCGCATAA
GCCTTGGTCATCACGTTACCGTACGGGGTCCCGTCGATGACCCAACAGCATTTCGTATTA
TAAGCTGGTTCTTCTTTTTAACAAGCACTCGCGGTTCCCCGTCCTAGGGTGTAACGAACG
AGTGAGCCACACGGGTGAGATTTACTTTCAAACAGAAGGACAGAAAGTTACTGAAAGCCT
TAATTCTGTAGCACGTTGATACTGTGCCCTCATGGGGAGTTTGCTATTCCATTGTTCCTA
AACGCTAGAACTGCGATTTACGTTGAGTGCACAGAACCGACGACGTTTATAGTTAGTGTA
GCAAGAACTCGCTGCTTGGTTTAGTTACTCGAGAACTGGAGCGGGCTTATCCCCTGTGGT
GCGTATACTCAGGTACAAAGCATGCTTAGAGCCACGTCCA
>Rosalind_8648
TGCCGACGAATGAAGGACAATACGGAATAAGCGGATCTAACATGTATGCATACAGATGTG
GATGACAAGAGTAGAGTGGAGACTCGGATTCTGGAGCTGGCGTTGTACTGTCCTTCCCAG
CTAATACATTGGATCTCCTAGCCTTGTTCTGACCCGACGTCCGAGCTAGTAGGTAGGCAT
AACGCAGTGCTCGACGCTGTCGCCTGATTTAGTGTCCCTTTAGCTGTTAGCTTGATGCGC
TAATCAAACTTTTTAATGGAATGGCGTGTTCCTAAGGATCATGAACCAGAATCATGGGTA
TGGAAGGGTGCCGGGGGCCTGTAGTCGAGGCAGGCTGACCAACACGGCCCTATCCGCCTG
CACAATCCGGTGGCCTCGGCACTCCAACAAAGCGCTTTAATCAGTTCCTCCGGAGTGCTG
CGACGATATTTAAAATAGACTAAACGCCTGTAAACCCGTATTATGAGTCGTGACGGTAAG
GTCTATAATCGTATCGTTACTCTGGGAAACGGTGATATGGTGCTATCCACCTGCGTAACT
ACCGTTGTTTCGAAGACAGGAATGGATACTGGGACTTTCTCCCATGTCGAAAATGGTTCC
TACATTCGCGGGTTCTACCAGATGTACCCGTTTTAAAGTTGCTCGCTGTCCCCTAGGTCC
GAAACACTACTTACAACGCCCACCGACCCAACACCCAGCATGGTCGCCGCAATCTCAGGG
AGCAGGCGGTCATTCTGAAGAACGCCCTCAGAATAAGACGTGATACAGACTAGGTACGTG
TGCTAGCGGTATCTATGGACGCGGACCACGGAATAAGAGGCAACCTAATGTGCCATGAGG
CCGTAAGCCCCTTAAAAATCCCTAATATTGCATCCATGAGAACCG
>Rosalind_4630
GTCTCGATCACAGTTATCCGACTCGCATGTAAGGACAGCATATCATATAGACACTGAAAA
CGGTTACATGGGTTTCGGCATTGGCAAGAGCTCCGGTACCTCAGAAAGCTCGTTGCCAGC
CTTTGGCATCCACTCAATCAGGACCTAGGCTTGTTGCTAAGTTACTGGTTTCACAATCTG
ATTGACGAAAAGAAACAAAACTGAAGAGAGTGCACAACTTTGGTGGGGTCGAAATTGTCC
TTCCTCGTATAGAAGTAGCGGTGCTGCGGTGTTCGGCCGACTGGAGTGGGAATGTTTGCC
TAGGAGAGCTACCGCATGTCTTACTTCGGCGCCTCGGTTGTTTTCAAAGTCGTTGCCGCT
TCGCCAACCTAAATCTGGAGCCTGTACCGAAGCGTATGGTCCGCAATCCACAAGGGCCCC
CTCTTGGAACTCCCATGAGCCCAGAGACATCTCGTCGACCACAACTGCCAACTGCGGAGC
CGACGGGGCATCACGGATTTGACCGCGACAGGGCACGTCGTAAAACGGACATGACGTAAA
CTCTAGTGTTGGCAAACTGTGGGGTTCTAAGATACACCAAGAATGGCTAGACGGCTTGCT
CAGCTGGAGAGCAATGGTCGGGAGGAGTGGTGCCACAGATTAGCCTACGTGTTGCATCTG
GTTCTGTTCACTACTACTTATAACATGCCCCTGTGCTTCTGGGTAGCTGCATAAACATGG
ACGTCTACAACGTTCACCTAACAATCGCGCTGTTCAATTCGCTAATCACTCCGTAACCGC
GGTGAAATAAGGGTCAGCGGGACCCATACGGACTTAAGGCAGGATAAAATCCGTTTGTCT
CTTGACATGTGCTCGAGGACTCCGCAAGTGATC
>Rosalind_3213
TGCAAGGGGTTGGCAGAAATTGACAAAAAGATAGCATGCAACTTTTTAGGAGATTGCGCC
CCCCCGATCTTCCGCCAGTGACTTTCGCACGCCTTTCTAGGTTTTGTAAAGGCTATTTCG
TGCGTGTCAACGTCTGAATGAGCGATTGTGATCGCTTGCCGCTCCTTAAGGGAAGTCCAG
GTGTATTGGTTCCTAAAGGTGTAATGTCACATCTCATAGCGCACGATGATGAGAGAATGA
AAGTTCAGTTAGCCCCTGATTTTAGGTGAGGCGGTATTCTAGCCAATCGTGTATCGGCAT
TACGAGCGCCCAGACTAGACTCAGATGCGTCTTATATTTTTCGACTGTCCCTCTAGGCCA
GGCTATAATCTCATCGTTTAACTAGGGATTTAGCAAAGCGCCTTAGTAACGTTAACAAGG
CCGTCAACTGCTATCGCTTACCAGCCTGTACGTACAGTCTTCCAACTCAGGACATCCGTG
ATTGTCATATCTCCTGGAACCGCCGTCTAAGGTTGACGGAGCGCGTCCGTCACAAAGCGT
TGCACTATACTACTAGTACTGACCCGTTTGGTGGTCAGTAAGACGCTAAGACAACAGACC
TCCAGGAAGAACGATACTATCGCAATAGGTCACTGTAAACTTATAAGGCTCTCTCGTCCC
GTGTATTCGTTGTATCAACAATCCAGTGAATCGGAGGCGATTATCGCTCCAGAGCATCGT
ACCTTCTTTATGTTGACAAAGATGATTCCAAATAATCACCTGTCCGGCCTGAGTGTAGGG
GCTACGGACTGGGCGCACCTCCGGTCAGTTGTACGTCAAGAAAATCATAGTCACGCTAAG
CTGGGTGGAGCGCTAGGCACATGTCTGAACATTTACTATACGTATTTGTATA
>Rosalind_3154
CCCTCGTGAGTATATCCGCGCAACTAAAAATCACGTCTTTATTCTGAGGTGGCTGTCCGT
ACATTTGGGCTGTCGGTAGACGGGCTTGCCGGGTGATTACCTATCTTGTAAAGTTTCCGC
GGCGTTTCGAGGTCTGAGCGATCCGTACCAGCTAAATCGACCCCTCAGACCACGTTGTGA
TACTTCCTGGGAGAACGCCGGGAATTCCGCTGAACGTATCGTCACAATTCGAGAGGAGAT
AAAGTGGAAGATGCTTAGCCTATGACGGCCTACTATATACTGTGCAGATACCGGGATATA
TCACAAATATAAGATTCTTATCGTTTTTCTTTCACTACCTAGACCTCAATGTGCGGTAAG
CGACAGTATGAGCAAGACATAAGCCCACCTCGCTGTCAATTCAATAGACTGTTGCTCATA
TAGTTGGATTGATTCCGGCACGACTCGAGCGCATAATCATCCAAGCGATTTCGCAGCATC
CGCGTTATCCATCCCTTTCATTCTTTGGAGGCGACACTTTTTCATCTACATTGGTGCAGC
GGTATCGAAAACGCGATACTAAAGCCCCTCTTCGTGAGTCCTCTCCTGCATAGGTGGTTC
TCCTGATGTTAGAAAGCAGGCAACCACAAGCGAGTGAATTGGCTAGACCCGTCGGGTTTC
GCGAGGCACGACGCCGCCCTCCCTGCGGAGTTTTCCCCCCAGCTAAAAAACGGTGTCGGC
TAATAATTTGCAAAACGACTCGATGCTATTATCGACGCTAGTATTTAACTTCTGATTCTA
CTGAGGTACTCCGTCCACGAGTACAGACCACCTCCTTCACGACTTCAAAAGGGCACTCTA
CCACTAATCCAACACCGGCTATCAGTCGAGTGTTCAGACCCCTACCGCGACGTCGGCCAG
GTATCGGGAAGCGTCTACAGATGCCTATGGTTCGTCGCCCAGGGCTACTC
>Rosalind_9084
ATTTCAGCTTAACCGCTGCAAGACTAATTTAATGCGTATCCACTCGTGAACGTTCCCGTT
AGCAACATGTACGGCACTCTCTGAAGGACACTTCTGTCTAGCTTCCTAACACGCATTGCT
TCGCCGTTTTGTAGGTGCCAGTTGACTAGTCGGACGCTTCAAATACTATATGTATTCACG
TGAAGCCAGATGTGTTACCGATATTTTAAGCTTTTTGATGACGGATGCAAACATGCAAAC
TCGTTAGGCGCGACCTCGGGTGGAGTTCCACCAAAACCCGGCTTATGTGTGGTACATGAG
TATCTTACCTCGGCCTCTGCAAGACAGTCCAGCGAGATTGTGTTAAGAGTGAGAAAACTC
CACGATAGACTTCTTACTTAGTGGGCGGTTCCCACACACGATACAGCCCCTATGCCAGAG
TGTCGGTACAAAAGGCATCTTCATGTTCTAGCTCACAAAGGAGCCTTTCGTCCGCGCGCG
TGTGACGCCTGGCCAGCAAACGATGAAACTGACACGAAGGGCTACGGTTCAGGCAGGTTG
CCGACCAGCAACTCCTCGTAATAGCCCTACAAACTTTGGGAACGAGTATGTATCAAACCA
TGCGGATAAATCTGAGCCCATTATGGACACTCCATTTGCGGGGTCAGATTGATCTAACAA
CTAGATACACCATAGGTACCGCCTGGCGACACTGAAGGGTGCTGAGTAACTAGACAAGAT
CTTCCGCCAGCTAGTGAAACGACATCAACATATGCCCCGCTGATTCCTTGGGATAGCAAT
CTCAGGAAGACTGGGACTACGAGTTTGTATTCATAGTGCTATCTCCATGAAACCTCAACA
CCTGGAACGCGATGTTCAAAACAGTTGGGCTTGATGCAGTGTCAT
"""

# Compute GC
result = compute_gc(fasta_data)
max_gc_id, (gc_percent, sequence) = max(result.items(), key=lambda item: item[1][0])

# Print highest value id and its GC content
print(max_gc_id)
print(gc_percent)
